---

# First task : creating the VPC.
# We are using the variables set in the vars.yml file.
# The module gives us back its result,
# which contains information about our new VPC. 
# We register it in the variable my_vpc.

- name: Create VPC
  ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ vpc_cidr_block }}"
      region: "{{ aws_region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      state: "present"
  register: my_vpc

# We now use the set_fact module 
# to save the id of the VPC in a new variable.

- name: Set VPC ID in varilable
  set_fact:
       vpc_id: "{{ my_vpc.vpc.id}}"

# Creating our only Subnet in the VPC.
# A subnet needs to be located in an Availability Zone (or AZ).
# Again, we register the results in a variable for later.

- name: Create Public Subnet
  ec2_vpc_subnet: 
    state: "present"
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ public_subnet_1_cidr }}"
    az: "{{ aws_region }}a"
    region: "{{ aws_region }}" 
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    resource_tags: 
          Name: "Public Subnet"
  register: my_public_subnet

# We save the id of the Public Subnet in a new variable.

- name: Set Public Subnet ID in Varilable
  set_fact:
      public_subnet_id: "{{ my_public_subnet.subnet.id }}"

# Every VPC needs at least one Internet Gateway.
# This component allows traffic between the VPC and the outside world.

- name: Create Internet Gateway for VPC
  ec2_vpc_igw:
       vpc_id: "{{ vpc_id }}"
       region: "{{ aws_region }}"
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
       state: "present"
  register: my_vpc_igw

# We save the id of the Internet Gateway in a new variable.
- name: Set Internwt Gateway ID in varilable
  set_fact: 
     igw_id:  "{{ my_vpc_igw.gateway_id}}"

# Now we set up a Route Table. 
# We attach that Route Table to the Public Subnet.
# The route we create here defines the default routing 
# of the table, redirecting requests to the Internet Gateway. 
# We don't see it here, but the route table will also contain 
# a route for resources inside the VPC, so that if we need 
# to reach an internal resource, we don't go to the Internet
# Gateway.

- name : Create Public Subner Route Table
  ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        tags: 
            Name: Public
        subnets: 
           - "{{ public_subnet_id }}"
        routes:
           - dest: 0.0.0.0/0
             gateway_id: "{{ igw_id }}"
  register: public_route_table

# Finally, we create our Main Security Group.
# Basically the idea here is to allow SSH access
# from your IP to the EC2 resources you will 
# start in your VPC.
- name: Create VPC Security Group
  ec2_group: 
        name: Grid
        description: "Security Group set to allow the grid accessible"
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"  
        rules: 
           - proto: tcp
             from_port: 4444
             to_port: 4444
             cidr: 0.0.0.0/0 
  register: security_group

- name: Create an EC2 instance in the VPC
  ec2:
    key_name: grid
    instance_type: t2.micro
    image: ami-01ccc867
    wait: yes
    group: Grid
    count: 1
    vpc_subnet_id: "{{ public_subnet_id }}"   
  register: ec2_instance

- name: Print the details
  shell: echo "{{ public_subnet_id }}"
    
